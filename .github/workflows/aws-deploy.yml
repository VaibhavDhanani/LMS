name: CI/CD Pipeline

on:
  push:
    branches:
      - main  

env:
  IMAGE_NAME_CLIENT: lms-client
  IMAGE_NAME_SERVER: lms-server
  IMAGE_NAME_LIVESERVER: lms-liveserver
  TAG: prod

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Generate .env.production for Client
        run: |
          cat <<EOF > Client/.env.production
          VITE_APIKEY=${{ secrets.VITE_APIKEY }}
          VITE_AUTH_DOMAIN=${{ secrets.VITE_AUTH_DOMAIN }}
          VITE_PROJECTID=${{ secrets.VITE_PROJECTID }}
          VITE_STORAGEBUCKET=${{ secrets.VITE_STORAGEBUCKET }}
          VITE_MESSAGINGSENDERID=${{ secrets.VITE_MESSAGINGSENDERID }}
          VITE_APPID=${{ secrets.VITE_APPID }}
          VITE_MEASUREMENTID=${{ secrets.VITE_MEASUREMENTID }}
          VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}
          VITE_SOCKET_URL=${{ secrets.VITE_SOCKET_URL }}
          VITE_STRIPE_PUBLISHKEY=${{ secrets.VITE_STRIPE_PUBLISHKEY }}
          VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          EOF

      - name: Build & Push ApplicationServer
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}:${{ env.TAG }} -f ApplicationServer/Dockerfile.prod ./ApplicationServer
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}:${{ env.TAG }}

      - name: Build & Push LiveServer
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_LIVESERVER }}:${{ env.TAG }} -f LiveServer/Dockerfile.prod ./LiveServer
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_LIVESERVER }}:${{ env.TAG }}

      - name: Build & Push Client
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}:${{ env.TAG }} -f Client/Dockerfile.prod ./Client
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}:${{ env.TAG }}

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: SSH and Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}:${{ env.TAG }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_LIVESERVER }}:${{ env.TAG }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}:${{ env.TAG }}

            cd ~/lms  
            docker compose pull
            docker compose down
            docker compose up -d --remove-orphans
          EOF
