name: Deploy to EC2

on:
  push:
    branches: [ main ]  # Runs deployment on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # ✅ Configure SSH First
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # ✅ Setup Server Environment (Node.js, Nginx, PM2)
      - name: Setup Environment
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo apt update -y
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt install -y nodejs nginx git
            sudo npm install -g pm2
          EOF

      # ✅ Create LMS Directory and Set Permissions
      - name: Create Project Directory
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo rm -rf /home/${{ secrets.EC2_USER }}/LMS
            mkdir -p /home/${{ secrets.EC2_USER }}/LMS
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /home/${{ secrets.EC2_USER }}/LMS
          EOF

      # ✅ Clone Project from GitHub
      - name: Clone and Setup Project
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}

            # ✅ Remove LMS directory if it exists
            sudo rm -rf LMS

            # ✅ Add GitHub to known hosts (Fix SSH verification failure)
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            # ✅ Clone the repository using SSH
            GIT_SSH_COMMAND="ssh -i ~/.ssh/github-deploy-key -o StrictHostKeyChecking=no" git clone ${{ secrets.REPO_URL }} LMS

            # ✅ Ensure correct permissions
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} LMS
          EOF
      
      

      # ✅ Install Dependencies and Build Project
      - name: Install Dependencies and Build
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/LMS
          
            echo "Setting up Client..."
            cd client
            npm install
            npm run build
            cd ..
          
            echo "Setting up Application Server..."
            cd ApplicationServer
            npm install
            cd ..
          
            echo "Setting up Live Server..."
            cd LiveServer
            npm install
            cd ..
          EOF

      # ✅ Start Backend and Live Server Using PM2
      - name: Start Applications
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/LMS
          
            echo "Starting Application Server..."
            cd ApplicationServer
            pm2 restart application-server || pm2 start app.js --name application-server
            cd ..
          
            echo "Starting Live Server..."
            cd LiveServer
            pm2 restart live-server || pm2 start server.js --name live-server
            cd ..
          EOF

      # ✅ Configure and Restart Nginx
      - name: Configure and Restart Nginx
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo systemctl restart nginx
          EOF

      - name: Fix Permissions After Deployment
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo chmod 755 /home/ubuntu
            sudo chmod -R 755 /home/ubuntu/LMS
            sudo chmod -R 755 /home/ubuntu/LMS/client
            sudo chmod -R 755 /home/ubuntu/LMS/client/dist
            sudo chmod -R 644 /home/ubuntu/LMS/client/dist/index.html
            sudo chown -R ubuntu:www-data /home/ubuntu/LMS
            sudo systemctl restart nginx
          EOF

